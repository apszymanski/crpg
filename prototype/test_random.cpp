#include <iostream>
#include <random>
#include <chrono>

// Initializes MT19937_64 using a seed_seq produced from random_device()
std::mt19937_64 rng_random_device_seed_initialization() {
    // Create seed_seq with random_device.
    std::cout << "Using random_device.\n";
    std::random_device device_source;
    std::cout << "Checking random_device entropy.\n";
    std::cout << "Random_device entropy: " << device_source.entropy() << "\n";
    std::cout << "Getting some random numbers from random_device:\n";
    int device_seed_1 = device_source();
    int device_seed_2 = device_source();
    int device_seed_3 = device_source();
    int device_seed_4 = device_source();
    int device_seed_5 = device_source();
    int device_seed_6 = device_source();
    int device_seed_7 = device_source();
    std::cout << "Random device numbers:\n" << "\t" << device_seed_1  
                                            << "\t" << device_seed_2  
                                            << "\t" << device_seed_3 << "\n" 
                                            << "\t" << device_seed_4 
                                            << "\t" << device_seed_5 
                                            << "\t" << device_seed_6 << "\n"
                                            << "\t" << device_seed_7 << "\n";
    std::cout << "Creating a seed_seq object using random device numbers.\n";
    std::seed_seq device_seq = {device_seed_1, device_seed_2, device_seed_3,
                                device_seed_4, device_seed_5, device_seed_6, device_seed_7};    
    // Create RNG and seed with device_seq
    std::cout << "\nCreating a device MT19937 RNG.\n";
    std::mt19937_64 device_rng;
    std::uint64_t first_device_rng_number = device_rng();
    if (first_device_rng_number != 14514284786278117030U ) {
        std::cout << "Warning: Neutrino bit flip detected!\n";
    } else {
        std::cout << "First number generated by RNG: " << first_device_rng_number << "\n";
    }
    std::cout << "Seeding RNG with device seed_seq object.\n";
    device_rng.seed(device_seq);
    return device_rng;
}

// Initializes MT19937_64 using a seed_seq produced from the default_random_generator() and time.now()
std::mt19937_64 rng_default_time_seed_initialization() {
    // Create seed_seq with dafault_random_engine
    std::cout << "\nUsing default_radom_engine.\n";
    std::cout << "Seeding the default_radom_engine with the current time.\n";
    std::chrono::high_resolution_clock::time_point tp = std::chrono::high_resolution_clock::now();
    std::chrono::high_resolution_clock::duration dtp = tp.time_since_epoch();
    std::default_random_engine default_source;
    default_source.seed(dtp.count());
    std::cout << "Getting some random numbers from default:\n";
    int default_seed_1 = default_source();
    int default_seed_2 = default_source();
    int default_seed_3 = default_source();
    int default_seed_4 = default_source();
    int default_seed_5 = default_source();
    int default_seed_6 = default_source();
    int default_seed_7 = default_source();
    std::cout << "Random default numbers:\n" << "\t" << default_seed_1  
                                            << "\t" << default_seed_2  
                                            << "\t" << default_seed_3 << "\n" 
                                            << "\t" << default_seed_4 
                                            << "\t" << default_seed_5 
                                            << "\t" << default_seed_6 << "\n"
                                            << "\t" << default_seed_7 << "\n";
    std::cout << "Creating a seed_seq object using random device numbers.\n";
    std::seed_seq default_seq = {default_seed_1, default_seed_2, default_seed_3,
                                 default_seed_4, default_seed_5, default_seed_6, default_seed_7};
    
    // Create RNG and seed with default_seq.
    std::cout << "\nCreating a default MT19937 RNG.\n";
    std::mt19937_64 default_rng;
    std::uint64_t first_default_rng_number = default_rng();
    if (first_default_rng_number != 14514284786278117030U ) {
        std::cout << "Warning: Neutrino bit flip detected!\n";
    } else {
        std::cout << "First number generated by RNG: " << first_default_rng_number << "\n";
    }
    std::cout << "Seeding RNG with default seed_seq object.\n";
    default_rng.seed(default_seq);
    return default_rng;    
}

void test_all_rolls(std::string generator_type, std::mt19937_64 generator) {
    // Rolling some dice.
    std::uniform_int_distribution<int> coin_2(1,2);
    std::uniform_int_distribution<int> tetrahedron_4(1,4);
    std::uniform_int_distribution<int> hexahedron_6(1,6);
    std::uniform_int_distribution<int> octahedron_8(1,8);
    std::uniform_int_distribution<int> decahedron_10(0,9);
    std::uniform_int_distribution<int> dodecahedron_12(1,12);
    std::uniform_int_distribution<int> icosahedron_20(1,20);

    std::cout << "Rolling d2 using " << generator_type << " generator: " << coin_2(generator) << "\n";

    std::cout << "Rolling d4 using " << generator_type << " generator: " << tetrahedron_4(generator) << "\n";

    std::cout << "Rolling d6 using " << generator_type << " generator: " << hexahedron_6(generator) << "\n";

    std::cout << "Rolling d8 using " << generator_type << " generator: " << octahedron_8(generator) << "\n";
    
    std::cout << "Rolling d10 using " << generator_type << " generator: " << decahedron_10(generator) << "\n";

    std::cout << "Rolling d12 using " << generator_type << " generator: " << dodecahedron_12(generator) << "\n";

    std::cout << "Rolling d20 using " << generator_type << " generator: " << icosahedron_20(generator) << "\n";

    std::cout << "Rolling d100 using " << generator_type << " generator: " << (decahedron_10(generator) * 10 + decahedron_10(generator)) << "\n";
}

int  main() {
    
    std::random_device rng;
    std::cout << rng.entropy() << std::endl;

    // RNG Proper.
    std::mt19937_64 device_rng = rng_random_device_seed_initialization();
    std::mt19937_64 default_rng = rng_default_time_seed_initialization();

    test_all_rolls("dev", device_rng);
    test_all_rolls("default+time", default_rng);
}